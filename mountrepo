#!/bin/bash

# Script usage/help/error strings
S_SCRIPTNAME="mountrepo"
S_USAGE="Usage: mountrepo [OPTIONS]\nTry 'mountrepo help' for more information."
S_USAGE_EXTENDED="Usage: mountrepo [OPTIONS]\nOPTIONS is a url identifying a valid svn repo."
S_HELP=$S_SCRIPTNAME" \"mounts\" a remote Subversion repository,\nallowing you to peruse it as you would a local file system."
S_SVN_NOT_INSTALLED="mountrepo: requires Subversion VCS."
S_MOUNT_ERROR="mountrepo: unable to \"mount\" repo. Subversion reports:"

# Error codes
E_SUCCESS=0
E_ERROR=-1

# SVN usage strings
CD_CMD="cd"
DOT_CMD="."
DOTDOT_CMD=".."
LS_CMD="ls"
LS_R_CMD="ls -R"
PWD_CMD="pwd"
CLEAR_CMD="clear"
EXIT_CMD="exit"

if [ -z $1 ]
then
	echo -e "$S_USAGE"
	exit $E_ERROR
fi

if [ "$1" == "help" ] || [ "$1" == "--help" ]
then
	echo -e "$S_HELP"
	echo -e "$S_USAGE_EXTENDED"
	exit $E_SUCCESS
fi

# check svn installed
SVN_LOC=$(whereis svn)
if [ "$SVN_LOC" == "svn:" ]
then
	echo -e "$S_SVN_NOT_INSTALLED"
	exit $E_ERROR
fi

# check valid svn repo
SVN_REPO_URL=$1
err=$(svn info "$SVN_REPO_URL" 2>&1)
if [ $? -ne 0 ]
then
	echo -e "$S_MOUNT_ERROR"
	echo -e "$err"
	exit $E_ERROR
fi

# do some final setup
IFS_ORIG="$IFS"
IFS=""
tab_char=`printf "\t"`
enter_char=`printf "\n"`
esc_seq=$'\x1b'
up_arrow=$'\x1b[A'
down_arrow=$'\x1b[B'
left_arrow=$'\x1b[D'
right_arrow=$'\x1b[C'
delete_char=$'\x7f'

backspace="\b"
clear_line_right="\x1b[K"
clear_line="\x1b[2K"

cmd_stack[0]=""
cmd_stack_len=0
cmd_stack_index=0

# 'mount' it!
CURR_BROWSE_LOC=$SVN_REPO_URL
while true
do
	cmd=""
	cmd_stack_index=$((cmd_stack_len-1))
	printf ">"
	while true
	do
		read -s -n1 key
		case "$key" in
			"$tab_char")
				break
			;;
			"$enter_char")
				cmd_stack[$cmd_stack_len]="$cmd"
				((cmd_stack_len++))
				break
			;;
			"$esc_seq")
				read -s -n2 escp # read rest of escape sequence
				seq=$key$escp
				if [ "$seq" == "$up_arrow" ]
				then
					if [ "$cmd_stack_index" -gt 0 ]
					then
						((cmd_stack_index--))
					fi
				elif [ "$seq" == "$down_arrow" ]
				then
					if [ "$cmd_stack_index" -lt $((cmd_stack_len-1)) ]
					then
						((cmd_stack_index++))
					fi
				fi

				printf "$clear_line\r"
				printf ">${cmd_stack["$cmd_stack_index"]}"
				cmd="${cmd_stack["$cmd_stack_index"]}"
			;;
			"$delete_char")
				cmd_len=`expr length "$cmd"`
				if [ "$cmd_len" -gt 0 ]
				then
					printf "$backspace""$clear_line_right"
					cmd=${cmd:0:$cmd_len-1}
				fi
			;;
			*)
				printf "$key"
				cmd="$cmd""$key"
			;;	
		esac	
	done
	printf "\n"
	if [ "${cmd:0:2}" == $CD_CMD ] 
	then
		len=`expr length "$cmd"`
		dir=${cmd:3:$len}
		if [ "$dir" == $DOT_CMD ] 
		then
			continue
		elif [ "$dir" == $DOTDOT_CMD ] 
		then
			len_curr_loc=`expr length "$CURR_BROWSE_LOC"`
			last_char=`expr substr "$CURR_BROWSE_LOC" "$len_curr_loc" 1`
			CURR_BROWSE_LOC=${CURR_BROWSE_LOC%/*$last_char}
			continue
		fi

		err=$(svn info "$CURR_BROWSE_LOC"/"$dir" 2>&1)
		if [ $? -ne 0 ] 
		then
			printf "mountrepo: cd: "$dir": No such file or directory\n"
			continue
		fi

		isDir=$(echo "$err" | grep "directory")
		if [ $? -eq 1 ] 
		then
			printf "mountrepo: cannot 'mount' file, only directories\n"
		else
			CURR_BROWSE_LOC="$CURR_BROWSE_LOC"/"$dir"
		fi
	else
		case "$cmd" in
			"$LS_CMD")
				svn ls $CURR_BROWSE_LOC
			;;
			"$LS_R_CMD")
				svn ls $CURR_BROWSE_LOC --depth infinity
			;;
			"$PWD_CMD")
				echo "$CURR_BROWSE_LOC"
			;;
			"$CLEAR_CMD")
				clear
			;;
			"$EXIT_CMD")
				exit $E_SUCCESS
			;;
			*)
				printf "Command not recognized: "$cmd"\n"
			;;
		esac
	fi	
done
